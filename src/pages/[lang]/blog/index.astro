---
import { languages } from '@i18n/ui';
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import { getCollection } from 'astro:content';
import { CollectionMetadata, collectionMetadata } from '@content/config';
import MainLayout from '@layouts/MainLayout.astro';
import BlogCard from '@components/BlogCard.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

export async function getStaticPaths() {
  const pages: any[] = [];

  let allPosts: any[] = [];

  for await (let c of collectionMetadata) {
    const coll = await getCollection(c.name as any);
    allPosts = allPosts.concat(coll);
  }

  allPosts = allPosts.sort((a, b) => {
    if (new Date(a.data.pubDate) < new Date(b.data.pubDate))
      return 1;
    if (new Date(a.data.pubDate) > new Date(b.data.pubDate))
      return -1;
    return 0;
  });

  Object.keys(languages).map((l: string) => {
    pages.push({
      params: { lang: l },
      props: {
        recents: allPosts.slice(0, 8),
        others: allPosts.slice(-6),
        collections: collectionMetadata,
      },
    });
  });

  return pages;
}

const param = Astro.params;
const { recents, others, collections } = Astro.props;
---

<MainLayout
  title={`Blog | Kevin Fiorentino`}
  description={`Kevin Fiorentino's personal blog`}
  image="/kevin.webp"
  addWidth={false}
>
  <section class="main-width">
    <h1 class="text-gradient mb-3 mt-0">
      Blog
    </h1>
    <h2>
      {t('blog.latest')}
    </h2>
    <hr class="mt-2 mb-0">
    <br><br>
    <div role="list" class="cards-grid">
      {
        recents.map((item: any) => (
          <div>
            <BlogCard
              slug={item.slug}
              collection={item.collection}
              title={param.lang == 'es' ? item.data.title : item.data.englishMetadata.title}
              description={param.lang == 'es' ? item.data.description : item.data.englishMetadata.description}
              image={item.data.image}
              pubDate={item.data.pubDate}
            >
            </BlogCard>
          </div>
        ))
      }
    </div>

  </section>

  <br><br><br>

  <section class="categories bg-polygon relative">
    <div class="relative main-width z-10">
      <h2>
        {t('blog.all-categories')}
      </h2>
      <ul class="badges" role="list">
        {
          collections.map((c: CollectionMetadata) => (
            <li class="badge-box" role="listitem">
              <a href={`/${lang}/blog/${c.name}`} class="badge capitalize" title={`Blog ${c.name}`} >
                {c.name}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </section>

  <br><br><br>

  <section class="main-width">
    <h2>
      {t('blog.others')}
    </h2>
    <hr class="mt-2 mb-0">
    <br><br>
    <div role="list" class="cards-grid">
      {
        others.map((item: any) => (
          <div>
            <BlogCard
              slug={item.slug}
              collection={item.collection}
              title={param.lang == 'es' ? item.data.title : item.data.englishMetadata.title}
              description={param.lang == 'es' ? item.data.description : item.data.englishMetadata.description}
              image={item.data.image}
              pubDate={item.data.pubDate}
            >
            </BlogCard>
          </div>
        ))
      }
    </div>

  </section>

</MainLayout>

<style lang="scss">
.categories {
  h2 {
    -webkit-text-fill-color: white;
  }
}
</style>
