---
import { getCollection } from 'astro:content';
import { collectionMetadata } from '@content/config';
import { languages } from '@i18n/ui';
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import MainLayout from '@layouts/MainLayout.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

export async function getStaticPaths() {

  const pages: any[] = [];
  let tags: string[] = [];

  // Get all tags on every category
  for await (let c of collectionMetadata) {
    const coll = await getCollection(c.name as any);
    tags = tags.concat([...new Set(coll.map((post) => post.data.tags).flat())]);
  }

  // Remove duplicated tags
  tags = [...new Set(tags)];

  Object.keys(languages).forEach((l: string) => {
    pages.push({
      params: { lang: l },
      props: {
        tags: tags
      },
    });
  });

  return pages;
}

const param = Astro.params;
const tags = Astro.props.tags;
---

<MainLayout
  title={`Tags | Kevin Fiorentino`}
  description={`Kevin Fiorentino's tags`}
  image="/kevin.png"
  addWidth={false}
>
  <br><br>

  <section class="tags-page bg-polygon relative" style="background: var(--primary);">
    <div class="main-width">

      <h1 class="text-gradient relative z-10">
        Tags
      </h1>
      <div class="tags relative">
        {tags.map((tag: string) => (
          <p class="tag">
            <a href={`/${lang}/tags/${tag}`}>{tag}</a>
          </p>
        ))}
      </div>

      <br>

    </div>
  </section>

  <br><br><br>

</MainLayout>

<style lang="scss">
.tags-page {

  h1 {
    -webkit-text-fill-color: white;
  }
  .tags {
    display: flex;
    flex-wrap: wrap;
    margin: 0 auto;
    z-index: 1;
    filter: drop-shadow(0px 4px 2px var(--black));

    .tag {
      margin: 0.6em;
      border: dotted 1px ar(--white);
      font-size: 1.15em;
      background-color: var(--white);

      a {
        display: block;
        color: var(--primary);
        padding: .8rem 1rem;
      }
    }
    .tag:nth-child(1n) {
      clip-path: polygon(15% 10%,100% 0,100% 25%,100% 100%,0 85%);
    }
    .tag:nth-child(2n) {
      clip-path: polygon(10% 15%,90% 0%,100% 30%,100% 100%,0% 85%);
    }
    .tag:nth-child(3n) {
      clip-path: polygon(10% 15%,85% 0%,85% 35%,100% 95%,14% 80%);
    }

  }
}

</style>
