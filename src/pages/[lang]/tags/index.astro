---
import { getCollection } from 'astro:content';
import { collectionMetadata } from '@content/config';
import { languages } from '@i18n/ui';
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import MainLayout from '@layouts/MainLayout.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

export async function getStaticPaths() {

  const pages: any[] = [];
  let tags: string[] = [];

  // Get all tags on every category
  for await (let c of collectionMetadata) {
    const coll = await getCollection(c.name as any);
    tags = tags.concat([...new Set(coll.map((post) => post.data.tags).flat())]);
  }

  // Remove duplicated tags
  tags = [...new Set(tags)];

  Object.keys(languages).forEach((l: string) => {
    pages.push({
      params: { lang: l },
      props: {
        tags: tags
      },
    });
  });

  return pages;
}

const param = Astro.params;
const tags = Astro.props.tags;
---

<MainLayout
  title={`Tags | Kevin Fiorentino`}
  description={`Kevin Fiorentino's tags`}
  image="/kevin.png"
  addWidth={false}
>
  <br><br>

  <section class="tags-page bg-polygon relative" style="background: var(--primary);">
    <div class="main-width">

      <h1 class="text-gradient relative z-10">
        Tags
      </h1>
      <ul class="tags relative z-10" role="list">
        {tags.map((tag: string) => (
          <li class="tag-box">
            <a class="tag capitalize" href={`/${lang}/tags/${tag}`} title={`Tag: ${tag}`} role="listitem">
              {tag}
            </a>
          </li>
        ))}
      </ul>

      <br>

    </div>
  </section>

  <br><br><br>

</MainLayout>

<style lang="scss">
.tags-page {

  h1 {
    -webkit-text-fill-color: white;
  }
  .tags {
    display: flex;
    flex-wrap: wrap;
    margin: 0 auto;

    .tag-box {
      filter: drop-shadow(0px 3px 6px #00000029);

      .tag {
        display: block;
        font-size: 1.15em;
        color: var(--primary);
        border: dotted 1px var(--white);
        background-color: var(--white);
        padding: .8rem 1rem;
        margin: 0.6em;
        clip-path: polygon(15% 10%, 100% 0, 100% 25%, 100% 100%, 0 85%);
        transition: .5s;
      }
      .tag:hover, .tag:focus {
        clip-path: polygon(0% 0%,100% 10%,100% 25%,100% 100%,0% 90%);
        transition: .5s;
      }
    }
    .tag-box:hover, .tag-box:focus {
      filter: drop-shadow(0px 4px 2px var(--black));
    }

  }
}

</style>
