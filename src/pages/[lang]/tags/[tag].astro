---
interface TagPage {
  tag: string;
  posts: any[];
}

import { getCollection } from 'astro:content';
import { collectionMetadata } from '@content/config';
import { languages } from '@i18n/ui';
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import MainLayout from '@layouts/MainLayout.astro';
import BlogCard from '@components/BlogCard.astro';
import Breadcrumbs from '@components/articles/Breadcrumbs.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

export async function getStaticPaths() {

  const pages: any[] = [];

  let allPosts: any[] = []
  let tags: string[] = [];

  // Get all tags on every category
  for await (let c of collectionMetadata) {
    const coll = await getCollection(c.name as any);
    allPosts = allPosts.concat(coll);
    tags = tags.concat([...new Set(coll.map((post) => post.data.tags).flat())]);
  }

  // Remove duplicated tags
  tags = [...new Set(tags)];

  // Create a object for each tag to save its posts
  const tagPages: TagPage[] = tags.map((t: string) => { return { tag: t, posts: [] } });

  // Interate each post and save it on its tags, a post can have several tags
  allPosts.forEach((post: any) => {
    post.data.tags.forEach((postTag: string) => {
      tagPages.forEach((tagPage: TagPage) => {
        if (tagPage.tag == postTag) {
          tagPage.posts.push(post);
        }
      });
    });
  });

  // Build each tag page with its posts
  tagPages.forEach((tagPage: TagPage) => {
    Object.keys(languages).forEach((l: string) => {
      pages.push({
        params: { lang: l, tag: tagPage.tag },
        props: {
          tag: tagPage.tag,
          posts: tagPage.posts.filter(tagPage => (tagPage.slug.split('/')[0] == l))
        },
      })
    });
  });

  return pages;
}

const param = Astro.params;
const props = Astro.props;
---

<MainLayout
  title={`Blog ${param.tag} | Kevin Fiorentino`}
  description={`Kevin Fiorentino's blog about ${param.tag}`}
  image={``}
  addWidth={true}
>
  <div>
    <p class="dark:text-white">Tag</p>
    <h1 class="text-gradient capitalize">
      {param.tag}
    </h1>
  </div>
  <div role="list" class="cards-grid">
    {
      props.posts.map((item: any) => (
        <BlogCard
          slug={item.slug}
          collection={item.collection}
          title={item.data.title}
          description={item.data.description}
          image={item.data.image}
          pubDate={item.data.pubDate}
        >
        </BlogCard>
      ))
    }
  </div>
</MainLayout>

<style>

</style>
